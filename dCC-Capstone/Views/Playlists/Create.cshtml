@model Capstone.Models.Playlist

@{
    ViewBag.Title = "Create Playlist";
}

<h2>Create a New Playlist</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.PlaylistName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PlaylistName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PlaylistName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsPrivate, htmlAttributes: new { @class = "control-label col-auto" })-->
            @Html.CheckBoxFor(model => model.IsPrivate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.IsPrivate, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PlaylistMood, "Playlist Moods", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.PlaylistMood, ViewBag.Moods as SelectList, "--Select a Mood (optional)--", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CreatedBy, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PopularityTarget, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PopularityTarget, new { htmlAttributes = new { @class = "amount" } })
                @Html.ValidationMessageFor(model => model.PopularityTarget, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GenreWeightPercentage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.GenreWeightPercentage, new { htmlAttributes = new { @class = "amount" } })
                @Html.ValidationMessageFor(model => model.GenreWeightPercentage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">

            @Html.LabelFor(model => model.DynamicTracksOnly, htmlAttributes: new { @class = "control-label col-auto" })
            <a target="_blank" rel="noopener nofollow noreferrer" href="https://duckduckgo.com/?q=loudness+war">(?)</a>-->
            @Html.CheckBoxFor(model => model.DynamicTracksOnly, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DynamicTracksOnly, "", new { @class = "text-danger" })

        </div>

        @*<input id="PopularityWeightPercentage" type="range" min="0" max="100" />*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
